{{ header(1) }}

## Система

### Характеристики процессора:
```
{{ sh("inxi -C") }}
```

### Характеристики памяти:
```
{{ sh("inxi -M") }}
```

### Версия gcc:
```
{{ sh("gcc --version | head -n 1") }}
```

### Версия OpenMP:
```
{{ sh("./target/version") }}
```

### Остальные Характеристики
```
{{ sh("uname -rm") }}
```

## Оценка алгоритма

### Блок-схема

```mermaid
    {{ graphstyle() }}
    graph TD
        A(Начало) --> B(i: 0 -> n)
        
        B --> C{"array[i] > max"}
        B --> E(выход)
        C -->|Да| D["max = array[i]"]
        D --> B
        C -->|Нет| B
```

### Принцип работы
Приведенный алгоритм итерируется по массиву чисел и сравнивает их с текущим для данного потока 
максимальным элементом - max. Если элемент оказывается больше чем max, то max присваивается значение
этого элемнта, иначе не присваивается. После выполнения итерационной части потока,
полученное внутри потока значение max сравнивается с max из shared области и из них
выбирается наибольший. В итоге наибольший элемент будет в переменной max из shared области. 

### Оценка сложности алгоритмы

$p$ - количество используемых потоков  
$n$ - длина обрабатываемой последовательности

Тогда, сложность алгоритма - $O(\frac{n}{p})$; в частности, при $p = 1$, сложность - $O(n)$.

Теоретическое, ускорение работы программы - $p$.

### Директивы OpenMP
`#pragma omp parallel num_threads(threads) shared(array, count) reduction(max: max) default(none)`  
Объявляется параллельная обасть, с количеством потоков `threads`. Переменные `array` и `count`
объявляются общими для всех потокв и непараллельной части алгоритма. Все новые переменные без явного
указания класса не разрешены.  
Область - цикл for + printf("-- My lmax is: %d;\n", max)
Если бы ее не было то цикл просто выполнился бы последовательно.

#pragma omp for
Задается директива относящаяся к циклу for идущему сразу после нее, выполняется распараллеливагие цикла с дефолтным значением schedule.
Область - цикл for
Если бы ее не было то цикл выполнился бы thread раз, каждый раз находя один и тот же максимальный элемент.

### Экспериментальные данные

Время работы программы при различном количестве потоков
![image](target/threads.png)

Ускорение работы программы по сравнению с однопоточной версией
![image](target/acceleration.png)

Эффективность работы программы
![image](target/efficiency.png)

## Выводы
На устройстве, на котором проходило тестирование - 4 физических ядра, из-за чего значительный
прирост программа показывает только при использовании 2 потоков. Вплоть до 8 потоков скорость выполнения
уменьшается, но с сильным отрывом от теоретической скорости выполнения. Использование больше чем 8 потоков 
не дает прироста в скорости выполнения программы.

## Исходный код

```c 
{{ sh('cat src/main.c') }}
```